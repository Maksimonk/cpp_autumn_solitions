#include <iostream>
#include <vector>
using namespace std;
/*
for Klim: решение методом Гаусса предполагает выделение при помощи ЭПС из матрицы системы единичной подматрицы. В простейшем случае выдеяем единичную матрицу, но когда
число неизвестных больше числа уравнений, нужно помнить, что есть ФСР, при помощи которой уже всё далее решается.
Я бы очень хотел использовать тут ФСР, но на это нужно слишком много времени, которого у меня нет (а катать со всяких форумов не собираюсь), поэтому далее будет 
код по решению СЛОУ, где число уравнений равно числу неизвестных. Но код со временем доработаю и напишу тебе об этом))
P.S.: ну или я слишком сильно погружаюсь в задачу, а на самом деле предполагалось только то, что будет далее
*/

int main()
{
    setlocale(LC_ALL, "Russian");
    int n_equation, n_unknown; // n_unknown задаёт количество столбцов в матрице системы; n_equation задаёт количество строк
    cout << "Введите количество уравнений: ";
    cin >> n_equation;
    if (n_equation < 1) {
        cout << "На решение такого линейная алгебра не способна. Обратитесь по телефону: +7 (499) 248-79-35";
        return 0;
    }
    cout << "\nВведите количество неизвестных: ";
    cin >> n_unknown;
    int n = n_equation;
    int m = n_unknown;
    m = n;// решение СЛОУ с только квадратными матрицами
    double matrix[n][m];
    cout << "Далее вводите коэффициенты (a1, a2, ..., c) расширенной матрицы в соответствии с требованиями программы.\n";
    for (int i = 0; i < n; i++) { // перебор уравнений
        for (int j = 0; j < n; j++) { // перебор строк
                cout << "a" << j << " = ";
                matrix[i][j].push_back;
            }
        }
    }


